// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TradingApiClient is the client API for TradingApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradingApiClient interface {
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type tradingApiClient struct {
	cc grpc.ClientConnInterface
}

func NewTradingApiClient(cc grpc.ClientConnInterface) TradingApiClient {
	return &tradingApiClient{cc}
}

func (c *tradingApiClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/TradingApi/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradingApiServer is the server API for TradingApi service.
// All implementations must embed UnimplementedTradingApiServer
// for forward compatibility
type TradingApiServer interface {
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	mustEmbedUnimplementedTradingApiServer()
}

// UnimplementedTradingApiServer must be embedded to have forward compatible implementations.
type UnimplementedTradingApiServer struct {
}

func (UnimplementedTradingApiServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedTradingApiServer) mustEmbedUnimplementedTradingApiServer() {}

// UnsafeTradingApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradingApiServer will
// result in compilation errors.
type UnsafeTradingApiServer interface {
	mustEmbedUnimplementedTradingApiServer()
}

func RegisterTradingApiServer(s grpc.ServiceRegistrar, srv TradingApiServer) {
	s.RegisterService(&_TradingApi_serviceDesc, srv)
}

func _TradingApi_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingApiServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TradingApi/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingApiServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TradingApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TradingApi",
	HandlerType: (*TradingApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _TradingApi_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
